<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/sampa/Documents/Data Science/Codecademy/SQL/SampleDatabase/chinook.db" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="4436"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="tracks"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="artists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="playlist_track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="playlists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table></browse_table_settings></tab_browse><tab_sql><sql name="Most_Tracks_in_PlayList.sql">select tracks.Name, count(*) as number_of_playlists
from tracks
LEFT JOIN playlist_track
	on tracks.TrackId = playlist_track.TrackId
GROUP BY playlist_track.TrackId
order BY count(playlist_track.PlaylistId) DESC
limit 100;

</sql><sql name="Tracks_Revenue.sql">SELECT tracks.TrackId, tracks.name as Track_Name, genres.name as Genre_Name, 
	    albums.Title as Album_Name, sum(invoice_items.UnitPrice * invoice_items.Quantity) as Revenue
from tracks

join albums
	on tracks.AlbumId = albums.AlbumId

join invoice_items
	on tracks.TrackId = invoice_items.TrackId

join genres
	on tracks.GenreId = genres.GenreId
	
GROUP BY invoice_items.TrackId, albums.AlbumId, genres.GenreId
ORDER BY sum(invoice_items.UnitPrice) DESC
limit 100;</sql><sql name="Total_revenue_country.sql">SELECT invoices.BillingCountry, round(sum(invoice_items.UnitPrice) * 100 / (SELECT sum(invoice_items.UnitPrice)FROM invoice_items), 2) as '% of Total Revenue for each country' 
FROM invoices
join invoice_items
	on invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY invoices.BillingCountry
ORDER BY round(sum(invoice_items.UnitPrice) * 100 / (SELECT sum(invoice_items.UnitPrice)FROM invoice_items), 2) DESC;</sql><sql name="customers_supported.sql">select employees.FirstName, employees.LastName,customers.SupportRepId, employees.EmployeeId, COUNT(DISTINCT customers.CustomerId) 'Customers Supported',
	   sum(invoices.Total) / count(DISTINCT customers.CustomerId) as 'Average Revenue',
	   sum(invoices.Total) as 'Total Revenue'
FROM customers

join employees
	on employees.EmployeeId = customers.SupportRepId
	
JOIN invoices
	on invoices.CustomerId = customers.CustomerId
	
GROUP BY customers.SupportRepId;</sql><current_tab id="3"/></tab_sql></sqlb_project>
